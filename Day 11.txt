#1. Nth Root of a Number using Binary Search


double multiply(double number, int n) {                
    double ans = 1.0;
    for(int i = 1;i<=n;i++) {
        ans = ans * number;
    }
    return ans; 
}

void getNthRoot(int n, int m) {
    double low = 1;
    double high = m;
    double eps = 1e-7; 
    
    while((high - low) > eps) {
        double mid = (low + high) / 2.0; 
        if(multiply(mid, n) < m) {
            low = mid; 
        }
        else {
            high = mid; 
        }
    }
    
    cout <<n<<"th root of "<<m<<" is "<<low<<endl; 
    
}

python code


def multiply(number, n):
    ans = 1.0
    for i in range(1, n + 1):
        ans = ans * number
    return ans




def getNthRoot(n, m):
    low = 1
    high = m
    eps = 1e-7


    while (high - low) > eps:
        mid = (low + high) / 2.0
        if multiply(mid, n) < m:
            low = mid
        else:
            high = mid


    print(n, "th root of ", m, " is ", low)


*********************************************************************************************************************
#2. Matrix median

Naive approach 

#include <bits/stdc++.h>
using namespace std;
// Function to find median  of row wise sorted matrix
int Findmedian(int arr[3][3], int row, int col)
{
  int median[row * col];
  int index = 0;
  for (int i = 0; i < row; i++)
  {
    for (int j = 0; j < col; j++)
    {
      median[index] = arr[i][j];
      index++;
    }
  }
 
  return median[(row * col) / 2];
}
int main()
{
  int row = 3, col = 3;
  int arr[3][3] = {{1, 3, 8},
                   {2, 3, 4},
                   {1, 2, 5}};
  cout <<"The median of the row-wise sorted matrix is: "<<Findmedian
  (arr, row, col) << endl;
  return 0;
}

OPTIMAL Solution******************************************************************888

#include <bits/stdc++.h>
using namespace std;
int countSmallerThanMid(vector<int> &row, int mid)
{
  int l = 0, h = row.size() - 1;
  while (l <= h)
  {
    int md = (l + h) >> 1;
    if (row[md] <= mid)
    {
      l = md + 1;
    }
    else
    {
      h = md - 1;
    }
  }
  return l;
}
int findMedian(vector<vector<int>> &A)
{
  int low = 1;
  int high = 1e9;
  int n = A.size();
  int m = A[0].size();
  while (low <= high)
  {
    int mid = (low + high) >> 1;
    int cnt = 0;
    for (int i = 0; i < n; i++)
    {
      cnt += countSmallerThanMid(A[i], mid);
    }
    if (cnt <= (n * m) / 2)
      low = mid + 1;
    else
      high = mid - 1;
  }
  return low;
}

*********************************************************************************************************************#3. Search Single Element in a sorted array

M#1.

  int findSingleElement(vector < int > & nums) {
            
            int n = nums.size();
            int elem = 0;
            for (int i = 0; i < n; i++) {
                elem = elem ^ nums[i];
            }
            
            return elem;
        }

M#2.

  int singleNonDuplicate(vector<int>& nums) {
          int low = 0; 
        int high = nums.size()-2;
         while(low <= high){
             int mid = low + (high - low)/2;
             if(nums[mid]== nums[mid^1]){
                 low = mid + 1;
             }
             else{
                 high = mid -1;
             }
         }
        
        return nums[low];
        
        
    
    }

*********************************************************************************************************************
#4. Search element in a sorted and rotated array/ find pivot where it is rotated

M#1.
   int search(vector<int>& nums, int target) {
        int l= 0;
       int  h = nums.size()-1;
        
         while(l <= h) {
            int mid= l + (h -l)/2;
            
            if(nums[mid] == target) return mid;
            
           // the left side is sorted
          if(nums[l] <= nums[mid]) {
             if(target >= nums[l] && target  <= nums[mid]) {
                 h = mid - 1;
             }
             else {
                 l = mid + 1;
                 }
           }
          else {
             if(target  >= nums[mid] && target <= nums[h]) {
                l= mid + 1;
               }
             else {
             h = mid - 1;
                }
              }
           }
          return -1;
          }

M#2.

  int search(vector<int>& nums, int target) {
        
         for(int i=0;i<nums.size();i++)
    {
        if(nums[i]==target)
            return i;
    }
    return -1;
    }

*********************************************************************************************************************#5. 4. Median of Two Sorted Arrays

Method #1.

float median(int nums1[],int nums2[],int m,int n) {
    int finalArray[n+m];
    int i=0,j=0,k=0;
    while(i<m && j<n) {
        if(nums1[i]<nums2[j]) {
            finalArray[k++] = nums1[i++];
        }
        else {
            finalArray[k++] = nums2[j++];
        }
    }
    if(i<m) {
        while(i<m) 
            finalArray[k++] = nums1[i++];
    }
    if(j<n) {
        while(j<n)
            finalArray[k++] = nums2[j++];
    }
    n = n+m;
    if(n%2==1) 
        return finalArray[((n+1)/2)-1];
    else return ((float)finalArray[(n/2)-1]+(float)finalArray[(n/2)])/2;
}

*********************************************************************************************************************
Q6 K-th Element of two sorted arrays

    int kthElement(int arr1[], int arr2[], int n, int m, int k)
    {
        if(n > m) {
           return kthElement(arr2, arr1, m, n, k);
          }
       int low = max(0, k-m), high = min(k,n);
                while(low <= high) {
          int cut1 = (low + high) >> 1;
           int cut2 = k - cut1;
           
           
               int l1= cut1 ==0 ? INT_MIN: arr1[cut1 - 1];
              int l2 = cut2 == 0 ?  INT_MIN : arr2[cut2 - 1];
             int r1 = cut1 == n ?   INT_MAX: arr1[cut1];
             int r2 = cut2 == m ?    INT_MAX: arr2[cut2];
             
             
           if(l1 <= r2 && l2 <= r1) {
           return max(l1, l2);
         }
          else if (l1> r2) {
           high = cut1 - 1;
          }
         else {
             low = cut1 + 1;
   }
  }
return 1; 
        
    }



*********************************************************************************************************************
Q6 